/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("const { selectors, attributes, state } = __webpack_require__(/*! ./helper_objects.js */ \"./src/js/helper_objects.js\");\n\nconst {\n  shuffle,\n  clickEventListener,\n  createCardElement,\n  clearBoard,\n  validateDimensions,\n  promptBoxElement,\n  stopGame,\n} = __webpack_require__(/*! ./helper_functions.js */ \"./src/js/helper_functions.js\");\n\nconst generateGame = (rows, columns) => {\n  selectors.configure.style.display = \"block\";\n  selectors.restart.style.display = \"none\";\n\n  const items = shuffle(rows, columns);\n\n  const cardsContainer = document.createElement(\"div\");\n  cardsContainer.classList.add(\"board\");\n  cardsContainer.style.gridTemplateColumns = `repeat(${columns}, auto)`;\n  cardsContainer.style.gridTemplateRows = `repeat(${rows}, auto)`;\n\n  items.forEach((item) => {\n    const card = createCardElement(item);\n    cardsContainer.appendChild(card);\n  });\n\n  const currentBoard = document.querySelector(\".board\");\n  if (currentBoard) {\n    currentBoard.replaceWith(cardsContainer);\n  } else {\n    selectors.boardContainer.appendChild(cardsContainer);\n  }\n};\n\nconst restartGame = () => {\n  const boardDiv = document.querySelector(\".board\");\n  selectors.restart.style.display = \"none\";\n  selectors.configure.style.display = \"block\";\n  selectors.boardContainer.classList.remove(attributes.flipped);\n  state.clickEnabled = true;\n\n  stopGame();\n  generateGame(state.rows, state.cols);\n  boardDiv.innerHTML = \"\";\n};\n\nconst attachEventListeners = () => {\n  selectors.configure.addEventListener(\"click\", configureDimension);\n  selectors.restart.addEventListener(\"click\", restartGame);\n  document.addEventListener(\"click\", clickEventListener);\n};\n\nconst configureGameDimensions = () => {\n  const { modalOverlay, selectField, confirmButton } = promptBoxElement();\n\n  confirmButton.addEventListener(\"click\", () => {\n    const [rows, columns] = selectField.value\n      .trim()\n      .split(\"x\")\n      .map((dim) => parseInt(dim.trim(), 10));\n\n    if (validateDimensions(rows, columns)) {\n      stopGame();\n      state.rows = rows;\n      state.cols = columns;\n      generateGame(rows, columns);\n      document.body.removeChild(modalOverlay);\n    }\n  });\n};\n\nconst configureDimension = () => {\n  state.gamePause = state.gameStarted;\n  clearBoard();\n  configureGameDimensions();\n};\n\ngenerateGame(state.rows, state.cols);\nattachEventListeners();\n\n\n//# sourceURL=webpack://ntokozo-kubheka-222-memory-game-in-vanilla-js-javascript/./src/js/app.js?");

/***/ }),

/***/ "./src/js/helper_functions.js":
/*!************************************!*\
  !*** ./src/js/helper_functions.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("const {\n  selectors,\n  state,\n  attributes,\n  displayMessages,\n  dimensionOptions,\n  emojis,\n  errorMessages,\n} = __webpack_require__(/*! ./helper_objects.js */ \"./src/js/helper_objects.js\");\n\nconst shuffle = (rows, columns) => {\n  const dimensions = rows * columns;\n\n  const picks = pickRandom(emojis, dimensions / 2);\n  const clonedArray = [...picks, ...picks];\n\n  for (let index = clonedArray.length - 1; index > 0; index--) {\n    const randomIndex = Math.floor(Math.random() * (index + 1));\n    const original = clonedArray[index];\n\n    clonedArray[index] = clonedArray[randomIndex];\n    clonedArray[randomIndex] = original;\n  }\n\n  return clonedArray;\n};\n\nconst pickRandom = (array, items) => {\n  const clonedArray = [...array];\n  const randomPicks = [];\n\n  for (let index = 0; index < items; index++) {\n    const randomIndex = Math.floor(Math.random() * clonedArray.length);\n\n    randomPicks.push(clonedArray[randomIndex]);\n    clonedArray.splice(randomIndex, 1);\n  }\n\n  return randomPicks;\n};\n\nconst updateTimerAndMoves = () => {\n  state.totalTime++;\n  selectors.moves.innerText = `${state.totalFlips} Moves`;\n  if (state.totalTime > 59) {\n    const minutes = Math.floor(state.totalTime / 60);\n    const remainingSeconds = state.totalTime % 60;\n\n    const formattedMinutes = String(minutes).padStart(2, \"0\");\n    const formattedSeconds = String(remainingSeconds).padStart(2, \"0\");\n    selectors.timer.innerText = `Time : ${formattedMinutes} Mins : ${formattedSeconds} Secs`;\n  } else if (state.totalTime < 2) {\n    selectors.timer.innerText = `Time : ${state.totalTime} Sec`;\n  } else {\n    selectors.timer.innerText = `Time : ${state.totalTime} Secs`;\n  }\n};\n\nconst startGame = () => {\n  state.gameStarted = true;\n  selectors.restart.style.display = \"block\";\n\n  state.loop = setInterval(updateTimerAndMoves, 1000);\n};\n\nconst resumeGame = () => {\n  if (state.gamePause) {\n    state.loop = setInterval(updateTimerAndMoves, 1000);\n    state.gameStarted = true;\n  }\n};\n\nconst flipBackCards = () => {\n  const cards = document.querySelectorAll(\".card:not(.matched)\");\n  for (let i = 0; i < cards.length; i++) {\n    cards[i].classList.remove(attributes.flipped);\n  }\n  state.flippedCards = 0;\n};\n\nconst checkMatchedCards = () => {\n  const flippedCards = document.querySelectorAll(\".flipped:not(.matched)\");\n  if (flippedCards[0].innerText === flippedCards[1].innerText) {\n    flippedCards[0].classList.add(attributes.matched);\n    flippedCards[1].classList.add(attributes.matched);\n  }\n\n  setTimeout(() => {\n    flipBackCards();\n  }, 1000);\n};\n\nconst endGame = () => {\n  setTimeout(() => {\n    selectors.configure.style.display = \"none\";\n    const myTime = state.totalTime;\n    const minutes = Math.floor(myTime / 60);\n    const remainingSeconds = myTime % 60;\n\n    const formattedMinutes = String(minutes).padStart(2, \"0\");\n    const formattedSeconds = String(remainingSeconds).padStart(2, \"0\");\n    selectors.timer.innerText = \"\";\n    selectors.moves.innerText = \"\";\n\n    selectors.boardContainer.classList.add(attributes.flipped);\n    selectors.win.innerHTML = `<span class=\"win-text\">You won the game<br/>with<br><span class=\"highlight\">${state.totalFlips}</span> moves<br />in<br> <span class=\"highlight\" style=\"white-space: nowrap;\">${formattedMinutes} Mins : ${formattedSeconds} Secs</span></span>`;\n\n    clearInterval(state.loop);\n  }, 1000);\n};\n\nconst flipCard = (card) => {\n  state.flippedCards++;\n  state.totalFlips++;\n\n  if (!state.gameStarted) {\n    startGame();\n  }\n\n  if (state.gameStarted) {\n    selectors.restart.style.display = \"block\";\n  }\n  if (state.flippedCards <= 2) {\n    card.classList.add(attributes.flipped);\n  }\n\n  if (state.flippedCards === 2) {\n    checkMatchedCards();\n  }\n\n  if (!document.querySelectorAll(\".card:not(.flipped)\").length) {\n    endGame();\n  }\n};\n\nconst clickEventListener = (event) => {\n  if (!state.clickEnabled) return;\n\n  const eventTarget = event.target;\n  const eventParent = eventTarget.parentElement;\n\n  if (\n    eventTarget.className.includes(attributes.card) &&\n    !eventParent.className.includes(attributes.flipped)\n  ) {\n    state.clickEnabled = false;\n\n    flipCard(eventParent);\n\n    setTimeout(() => {\n      state.clickEnabled = true;\n    }, 1000);\n  }\n};\n\nconst createModalOverlay = () => {\n  const modalOverlay = document.createElement(\"div\");\n  modalOverlay.classList.add(\"modal-overlay\");\n  return modalOverlay;\n};\n\nconst createPromptBox = () => {\n  const promptBox = document.createElement(\"div\");\n  promptBox.classList.add(\"prompt-box\");\n\n  const promptMessage = document.createElement(\"p\");\n  promptMessage.textContent = displayMessages.dimensionsHelp;\n  promptMessage.classList.add(\"prompt-message\");\n  promptBox.appendChild(promptMessage);\n\n  return promptBox;\n};\n\nconst createSelectField = () => {\n  const selectField = document.createElement(\"select\");\n  selectField.classList.add(\"select-field\");\n  const currentDim = `${state.rows}x${state.cols}`;\n  dimensionOptions.forEach((optionText) => {\n    if (optionText !== currentDim) {\n      const option = document.createElement(\"option\");\n      option.value = optionText;\n      option.text = optionText;\n      selectField.appendChild(option);\n    }\n  });\n\n  return selectField;\n};\n\nconst createConfirmButton = () => {\n  const confirmButton = document.createElement(\"button\");\n  confirmButton.textContent = \"Confirm\";\n  confirmButton.classList.add(\"confirm-button\");\n\n  return confirmButton;\n};\n\nconst createCancelButton = (modalOverlay) => {\n  const cancelButton = document.createElement(\"button\");\n  cancelButton.textContent = \"Cancel\";\n  cancelButton.classList.add(\"cancel-button\");\n  cancelButton.addEventListener(\"click\", () => {\n    document.body.removeChild(modalOverlay);\n    selectors.configure.style.display = \"block\";\n    resumeGame();\n  });\n\n  return cancelButton;\n};\n\nconst assemblePromptBoxElements = (\n  modalOverlay,\n  promptBox,\n  selectField,\n  confirmButton,\n  cancelButton\n) => {\n  promptBox.appendChild(selectField);\n  promptBox.appendChild(confirmButton);\n  promptBox.appendChild(cancelButton);\n  modalOverlay.appendChild(promptBox);\n  document.body.appendChild(modalOverlay);\n};\n\nconst promptBoxElement = () => {\n  const modalOverlay = createModalOverlay();\n  const promptBox = createPromptBox();\n  const selectField = createSelectField();\n  const confirmButton = createConfirmButton();\n  const cancelButton = createCancelButton(modalOverlay);\n\n  assemblePromptBoxElements(\n    modalOverlay,\n    promptBox,\n    selectField,\n    confirmButton,\n    cancelButton\n  );\n\n  return { modalOverlay, selectField, confirmButton };\n};\n\nconst addRedText = (errorMessage) => {\n  let redText = document.querySelector(\".red-text\");\n\n  if (!redText) {\n    redText = document.createElement(\"p\");\n    redText.classList.add(\"red-text\");\n    redText.style.color = \"red\";\n    redText.style.marginTop = \"5px\";\n\n    const promptBox = document.querySelector(\".prompt-box\");\n    promptBox.appendChild(redText);\n  }\n\n  redText.textContent = errorMessage;\n\n  if (redText.timer) {\n    clearTimeout(redText.timer);\n  }\n\n  redText.timer = setTimeout(() => {\n    redText.textContent = \"\";\n  }, 3000);\n};\n\nconst createCardElement = (item) => {\n  const card = document.createElement(\"div\");\n  card.classList.add(\"card\");\n\n  const cardFront = document.createElement(\"div\");\n  cardFront.classList.add(\"card-front\");\n\n  const cardBack = document.createElement(\"div\");\n  cardBack.classList.add(\"card-back\");\n  cardBack.textContent = item;\n\n  card.appendChild(cardFront);\n  card.appendChild(cardBack);\n\n  return card;\n};\n\nconst clearBoard = () => {\n  const boardDiv = selectors.board;\n  clearInterval(state.loop);\n  state.gameStarted = false;\n  boardDiv.innerHTML = \"\";\n};\n\nconst validateDimensions = (rows, columns) => {\n  if (\n    [rows, columns].some((dim) => isNaN(dim) || dim <= 1) ||\n    rows > 6 ||\n    columns > 6 ||\n    (rows * columns) % 2 !== 0\n  ) {\n    addRedText(errorMessages.errorDimensions);\n    return false;\n  }\n  return true;\n};\n\nconst stopGame = () => {\n  state.gameStarted = false;\n  state.totalFlips = 0;\n  state.totalTime = 0;\n  clearInterval(state.loop);\n  state.flippedCards = 0;\n  selectors.timer.innerText = \"Time : 0 Secs\";\n  selectors.moves.innerText = \"0 Moves\";\n};\n\nmodule.exports = {\n  shuffle,\n  clickEventListener,\n  createCardElement,\n  clearBoard,\n  validateDimensions,\n  promptBoxElement,\n  stopGame,\n};\n\n\n//# sourceURL=webpack://ntokozo-kubheka-222-memory-game-in-vanilla-js-javascript/./src/js/helper_functions.js?");

/***/ }),

/***/ "./src/js/helper_objects.js":
/*!**********************************!*\
  !*** ./src/js/helper_objects.js ***!
  \**********************************/
/***/ ((module) => {

eval("const selectors = {\n  boardContainer: document.querySelector(\".board-container\"),\n  board: document.querySelector(\".board\"),\n  moves: document.querySelector(\".moves\"),\n  timer: document.querySelector(\".timer\"),\n  start: document.querySelector(\"button\"),\n  configure: document.getElementById(\"set-dimension\"),\n  restart: document.getElementById(\"restart\"),\n  win: document.querySelector(\".win\"),\n  controls: document.querySelector(\".controls\"),\n};\n\nconst state = {\n  gameStarted: false,\n  flippedCards: 0,\n  totalFlips: 0,\n  totalTime: 0,\n  gamePause:true,\n  clickEnabled: true,\n  loop: null,\n  rows: 4,\n  cols: 4,\n};\n\nconst attributes = {\n  flipped: \"flipped\",\n  matched: \"matched\",\n  card: \"card\",\n};\n\nconst errorMessages = {\n  errorDimensions:\n    \"Please select a valid option. Choose the correct entry from the available choices.\",\n};\n\nconst displayMessages = {\n  dimensionsHelp:\n    \"Please choose game dimensions from the options provided in the select menu. to Select a grid size below to start playing.\",\n};\n\nconst emojis = [\n  \"🍎\",\n  \"🍌\",\n  \"🍊\",\n  \"🍇\",\n  \"🍉\",\n  \"🍓\",\n  \"🍍\",\n  \"🥭\",\n  \"🥝\",\n  \"🍑\",\n  \"🍐\",\n  \"🍋\",\n  \"🥦\",\n  \"🥕\",\n  \"🥬\",\n  \"🍅\",\n  \"🥒\",\n  \"🍈\",\n];\n\nconst dimensionOptions = [\n  \"select\",\n  \"2x3\",\n  \"2x4\",\n  \"2x5\",\n  \"2x6\",\n  \"3x4\",\n  \"3x6\",\n  \"4x2\",\n  \"4x3\",\n  \"4x4\",\n  \"4x5\",\n];\n\nmodule.exports = {\n  attributes,\n  state,\n  selectors,\n  errorMessages,\n  emojis,\n  dimensionOptions,\n  displayMessages,\n};\n\n//# sourceURL=webpack://ntokozo-kubheka-222-memory-game-in-vanilla-js-javascript/./src/js/helper_objects.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/js/app.js");
/******/ 	
/******/ })()
;